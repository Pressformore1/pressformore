<?php

namespace P4M\TrackingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use P4M\UserBundle\Entity\User;
/**
 * UserActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserActivityRepository extends EntityRepository
{
    
    public function findProfileActivity(User $user,$page)
    {
        $qb = $this ->createQueryBuilder('a');
        $qb->leftJoin('a.post','p');
        $qb->leftJoin('a.comment','c');
        $qb->leftjoin('a.vote','v','with','v.score=1');
        $qb->leftJoin('a.wall','w');
        $qb->leftJoin('a.userLink','ul')

                ;
        
        $qb ->where('a.user=:user')
            ->setParameter('user', $user)
//            ->andWhere('v.score=1')
            ;
        
        
        $allowedTypes = [
            UserActivity::TYPE_POST_ADDED,
            UserActivity::TYPE_POST_VOTED,
            UserActivity::TYPE_POST_COMMENTED,
            UserActivity::TYPE_WALL_VOTED,
            UserActivity::TYPE_WALL_CREATED,
            UserActivity::TYPE_WALL_COMMENTED,
            UserActivity::TYPE_USER_FOLLOWED,
            UserActivity::TYPE_POST_AUTHOR_IDENTIFIED,
                
                ];
        $whereType = $qb->expr()->orx();
        $whereType->add($qb->expr()->in('a.type',$allowedTypes));
        $qb->andWhere($whereType
                
//                $qb->expr()->orX(
//                        $qb->expr()->eq('a.type', 'post_added'),
//                        $qb->expr()->eq('a.type', 'post_voted'),
//                        $qb->expr()->eq('a.type', 'post_commented'),
//                        $qb->expr()->eq('a.type', 'wall_voted'),
//                        $qb->expr()->eq('a.type', 'wall_created'),
//                        $qb->expr()->eq('a.type', 'wall_commented'),
//                        $qb->expr()->eq('a.type', 'user_followed')
                        
//        )
                
                );
        
        $qb->groupBy('a.post');
        $qb->addGroupBy('a.wall');
        $qb->addGroupBy('a.userLink');
        $qb->orderBy('a.date','DESC');
        
        $qb ->setFirstResult( 15*($page-1))
                ->setMaxResults(15);
        return $qb->getQuery()->getResult();
        
        
        
    }
    
    public function findByUserPaged(User $user,$limit=15,$offset=0)
    {
        $qb = $this ->createQueryBuilder('a');
        
        $qb->leftJoin('a.post','p');
        $qb->leftJoin('a.comment','c');
        $qb->leftJoin('a.vote','v');
        $qb->leftJoin('a.wall','w');
        
        
        $qb->groupBy('a.post,a.type,a.wall');
        
        
//        $qb->leftJoin('a.user','u');
//            ->select('DISINCT u.id');
        
        $qb ->where('a.user=:user')
            ->setParameter('user', $user);
                
        $qb ->orderBy('a.date','DESC')
//            ->setFirstResult( $offset)
//            ->setMaxResults($limit)
            ;
        
        return $qb->getQuery()->getResult();
            
            
    }
    
    public function findPostActivityByUser(User $user,$postData = array(),$limit=15,$offset=0)
    {
         $qb = $this ->createQueryBuilder('a');
        
        $qb ->join('a.post','p')
            ->addSelect('p')
            
            
            
                ;
        
        $qb->groupBy('a.post');
        
        $qb ->where('a.user=:user')
            ->setParameter('user', $user)
//            ->andWhere('a.post!=:null')
//            ->setParameter('null',null)
                ;
        
        if (isset($postData['activities']))
        {
            $whereCat = $qb->expr()->orx();
            $i=0;
            foreach ($postData['activities'] as $activity)
            {
                $whereCat->add($qb->expr()->eq('a.type',':activity'.$i));
                $qb->setParameter('activity'.$i, $activity);
                $i++;
            }
            
            $qb->andWhere($whereCat);
            
        }
        if (isset($postData['categories']))
        {
            $qb ->leftJoin('p.categories', 'pc')
                ->addSelect('pc');
            $qb->andWhere($qb->expr()->in('pc.id',$postData['categories']));
        }
        if (isset($postData['languages']))
        {
            $qb ->leftJoin('p.lang', 'pl')
                ->addSelect('pl');
            $qb->andWhere($qb->expr()->in('pl.id',$postData['languages']));
        }
        if (isset($postData['types']))
        {
            $qb ->leftJoin('p.type', 'pt')
                ->addSelect('pt');
            $qb->andWhere($qb->expr()->in('pt.id',$postData['types']));
        }
        if (isset($postData['time']->from))
        {
            $qb ->andWhere('a.date>:timeFrom')
                ->setParameter('timeFrom', $this->getTimeFromIndice($postData['time']->from));
        }
        if (isset($postData['time']->to))
        {
            $qb ->andWhere('a.date<:timeto')
                ->setParameter('timeto', $this->getTimeFromIndice($postData['time']->to));
        }
        
        
        $qb ->orderBy('a.date','DESC');
            
        
        if ($limit)
        {
            $qb ->setFirstResult( $offset)
                ->setMaxResults($limit);
        }
        
        return $qb->getQuery()->getResult();
    }
    
    private function getTimeFromIndice($indice)
    {
        $dateTime = new \DateTime;
        switch ($indice)
        {
            case '1' :
                $dateTime->modify('-1 day');
                break;
            case '2' :
                $dateTime->modify('-2 day');
                break;
            case '3' :
                $dateTime->modify('-3 day');
                break;
                break;
            case '4' :
                $dateTime->modify('-1 week');
                break;
                break;
            case '5' :
                $dateTime->modify('-2 week');
                break;
            case '6' :
                $dateTime->modify('-1 month');
                break;
                break;
            case '7' :
                $dateTime->modify('-3 month');
                break;
                break;
            case '8' :
                $dateTime->modify('-6 month');
                break;
                break;
            case '9' :
                $dateTime->modify('-1 year');
                break;
            case '10' :
                $dateTime->modify('-5 year');
                break;
            case '11' :
                $dateTime->modify('-11 year');
                break;
                
        }
        
        return $dateTime;
    }
    
    public function findWallActivityByUser(User $user,$limit=15,$offset=0)
    {
         $qb = $this ->createQueryBuilder('a');
        
        $qb->join('a.wall','w')
                ->addSelect('w');
        
        
        
        $qb->groupBy('a.wall');
        
        $qb ->where('a.user=:user')
            ->setParameter('user', $user)
//            ->andWhere('a.post!=:null')
//            ->setParameter('null',null)
                ;
                
        $qb ->orderBy('a.date','DESC')
            ->setFirstResult( $offset)
            ->setMaxResults($limit)
            ;
        
        return $qb->getQuery()->getResult();
    }
}
