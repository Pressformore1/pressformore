<?php

namespace P4M\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
//use P4M\CoreBundle\Entity\Post;
//use P4M\CoreBundle\Entity\Comment;

/**
 * VoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoteRepository extends EntityRepository
{
    
    public function countPositive(Post $post)
    {
        $em = $this->getEntityManager();
        $qb = $em   ->createQueryBuilder()
                    ->select('count(v.id)')
                    ->from('P4MCoreBundle:Vote','v')
                    ->where('v.score = :score')
                    ->setParameter('score', 1)
                    ->join('v.post','p')
                    ->andWhere('p.id = :postId')
                    ->setParameter('postId', $post->getId());
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countNegative(Post $post)
    {
        $em = $this->getEntityManager();
        $qb = $em   ->createQueryBuilder()
                    ->select('count(v.id)')
                    ->from('P4MCoreBundle:Vote','v')
                    ->where('v.score = :score')
                    ->setParameter('score', -1)
                    ->join('v.post','p')
                    ->andWhere('p.id = :postId')
                    ->setParameter('postId', $post->getId());
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    public function countPositiveByComment(Comment $comment)
    {
        $em = $this->getEntityManager();
        $qb = $em   ->createQueryBuilder()
                    ->select('count(v.id)')
                    ->from('P4MCoreBundle:Vote','v')
                    ->where('v.score = :score')
                    ->setParameter('score', 1)
                    ->join('v.comment','c')
                    ->andWhere('c.id = :commentId')
                    ->setParameter('commentId', $comment->getId());
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countNegativeByComment(Comment $comment)
    {
        $em = $this->getEntityManager();
        $qb = $em   ->createQueryBuilder()
                    ->select('count(v.id)')
                    ->from('P4MCoreBundle:Vote','v')
                    ->where('v.score = :score')
                    ->setParameter('score', -1)
                    ->join('v.comment','c')
                    ->andWhere('c.id = :commentId')
                    ->setParameter('commentId', $comment->getId());
                    
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    public function countPositiveByWall(Wall $wall)
    {
        $em = $this->getEntityManager();
        $qb = $em   ->createQueryBuilder()
                    ->select('count(v.id)')
                    ->from('P4MCoreBundle:Vote','v')
                    ->where('v.score = :score')
                    ->setParameter('score', 1)
                    ->join('v.wall','w')
                    ->andWhere('w.id = :wallId')
                    ->setParameter('wallId', $wall->getId());
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    
    public function countNegativeByWall(Wall $wall)
    {
        $em = $this->getEntityManager();
        $qb = $em   ->createQueryBuilder()
                    ->select('count(v.id)')
                    ->from('P4MCoreBundle:Vote','v')
                    ->where('v.score = :score')
                    ->setParameter('score', -1)
                    ->join('v.wall','w')
                    ->andWhere('w.id = :wallId')
                    ->setParameter('wallId', $wall->getId());
        
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    
}
