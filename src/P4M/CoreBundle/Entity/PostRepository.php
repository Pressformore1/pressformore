<?php

namespace P4M\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use P4M\UserBundle\Entity\User;
/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    
    public function getPostsByCategories($categories,$orderBy = 'dateAdded')
    {
        
    }
    
    public function getFullActivity(User $user)
    {
        $qb = new \Doctrine\DBAL\Query\QueryBuilder();




        $qb = $this->createQueryBuilder('p');
        $qb = $this->addComments($qb);
        $qb = $this->addVotes($qb);
//        $qb->addSelect('u')
//                ->add('from','P4MUserBundle:User u, P4MCoreBundle:Post p')
//                ->innerJoin('u.followers', 'fol')
//                ->innerJoin('u.following', 'foling')
                ;
        
        $qb->where('p.user = :user')
            ->orWhere('v.user = :user')
            ->orWhere('co.user = :user')
//            ->orWhere('fol.follower = :user')
//            ->orWhere('fol.following = :user')
            ->setParameter('user', $user);
        
        return $qb->getQuery()->getResult();
        
    }
    
    //Return array_collection
    public function findByCategoryFull($categoryId)
    {
        $qb = $this->createQueryBuilder('p');
        $qb = $this->addCategories($qb);
        $qb = $this->addComments($qb);
        $qb = $this->addVotes($qb);
        $qb = $this->addScore($qb);
        $qb     ->where('c.id= :id')
                ->setParameter('id', $categoryId);
        
        $qb = $this->addUser($qb);
        
        return new \Doctrine\Common\Collections\ArrayCollection($qb->getQuery()->getResult());
    }
    
    public function findByCategoriesId(array $categriesId,$limit=15,$offset=0)
    {
        $qb = $this->createQueryBuilder('p');
        $qb = $this->addCategories($qb);
//        $qb = $this->addComments($qb);
        
        $qb->where($qb->expr()->in('c.id',$categriesId));
        $qb = $this->addScore($qb);        
         $qb = $this->addUser($qb);
         
         $qb->orderBy('p.dateAdded','DESC')
            ->setFirstResult( $offset)
            ->setMaxResults($limit);
         
        return $qb->getQuery()->getResult();
    }
    
    public function countPosts()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('count(p.id)');
        $qb->from('P4MCoreBundle:Post','p');

        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countPostsByCategory($categoryId,$date = null)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('count(p.id)');
        $qb     ->from('P4MCoreBundle:Post','p')
                ->join('p.categories','c')
                ->where('c.id= :id')
                ->setParameter('id', $categoryId);
        if ($date != null)
        {
            $qb     ->andWhere('p.dateAdded > :dateStart')
                    ->setParameter('dateStart', $date);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }
    
    
    public function countPostsByCategories(array $categriesId)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('count(p.id)');
        $qb ->from('P4MCoreBundle:Post','p')
            ->join('p.categories','c')
            ->where($qb->expr()->in('c.id',$categriesId));

        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function getNewPosts()
    {
        $qb = $this->createQueryBuilder('p');
        
        $qb->where('p.id>:id');
        $qb->setParameter('id', 143);
                
         
        return $qb->getQuery()->getResult();
    }
    
    
    /* Obsolete */
    public function findByUserActions(User $user,$limit=15,$offset=0)
    {
        $qb = $this ->createQueryBuilder('p')
                    ->leftJoin('p.comments', 'co')
                    ->leftJoin('p.votes', 'v');
        $qb = $this->addScore($qb);
        
        $qb ->where('p.user=:user')
            ->orWhere('co.user=:user')
            ->orWhere('v.user=:user')
//            ->where('v.score=:score')
//            ->setParameter('score', "1")
            ->setParameter('user', $user->getId());
                
        $qb ->orderBy('p.dateAdded','DESC')
            ->addOrderBy('co.dateUpdated', 'DESC')
            ->addOrderBy('v.date', 'DESC')
//            ->setFirstResult( $offset)
//            ->setMaxResults($limit)
            ;
        
        return $qb->getQuery()->getResult();
            
            
    }
    
    
    public function findNewPostCountByWall(User $user,Wall $wall)
    {
        $em = $this->getEntityManager();
        
//        
        $viewsRepo = $em->getRepository('P4MTrackingBundle:WallView');
        
        
        $lastView = $viewsRepo->findLastView($user,$wall);
        
        
        
        $qb = $em->createQueryBuilder();
        $qb->select('count(p.id)');
        $qb ->from('P4MCoreBundle:Post','p');
        
        $qb = $this->wallWhereFilter($qb, $wall,$user);
        
//       die('toto');
//        die($lastView[0]->getDate()->format('Y-m-d H:i:s'));
        
//        
        if (count($lastView))
        {
//            return $lastView[0]->getDate()->format('Y-m-d H:i:s');
            $qb ->andWhere('p.dateAdded > :dateLastView')
                ->setParameter('dateLastView',$lastView[0]->getDate()->format('Y-m-d H:i:s'));
        }
        
        
        
        return $qb->getQuery()->getSingleScalarResult();
        
        
            
        
    }
    
    public function postCountByWall(User $user,Wall $wall)
    {
        $em = $this->getEntityManager();
        
//        
        $viewsRepo = $em->getRepository('P4MTrackingBundle:WallView');
        
        
        $lastView = $viewsRepo->findLastView($user,$wall);
        
        
        
        $qb = $em->createQueryBuilder();
        $qb->select('count(p.id)');
        $qb ->from('P4MCoreBundle:Post','p');
        
        $qb = $this->wallWhereFilter($qb, $wall,$user);
        
        return $qb->getQuery()->getSingleScalarResult();
        
        
            
        
    }




    public function findByWall(Wall $wall,User $user,$limit =15,$offset=0,$postData = array())
    {
        
        
        $qb = $this ->createQueryBuilder('p')

                    ;
        
        $qb = $this->addScore($qb);
        $qb = $this->addComments($qb);
        $qb = $this->addVotes($qb);
        $qb = $this->addViews($qb);
        
        $qb = $this->wallWhereFilter($qb, $wall,$user,$postData);
        if (isset($postData['rank']))
        {
            $qb = $this->orderByRank($qb,$postData['rank']);
        }
        else
        {
            $qb ->orderBy('p.dateAdded','DESC');
        }
        $qb->groupBy('p.id');
        
           $qb ->setFirstResult( $offset)
            ->setMaxResults($limit);
        
        return $qb->getQuery()->getResult();
        
    }
    
    private function orderByRank($qb,$rank)
    {
        switch ($rank)
        {
            case 'quality':
                $qb ->orderBy('sc.score','DESC');
            break;
            case 'comments':
                $qb ->addSelect('count(co.id) as HIDDEN cc')
                    ->orderBy('cc','DESC');
            break;
            case 'views':
                $qb ->addSelect('count(vi.id) as HIDDEN vv')
                    ->orderBy('vv','DESC');
            break;
            case 'like':
//                $qb ->addSelect('SUM(v.score) as HIDDEN vs')
                $qb ->addSelect('(   select SUM(vov.score) from \P4M\CoreBundle\Entity\Vote vov LEFT JOIN vov.post pop where vov.post = pop  ) as HIDDEN vs')
                    ->orderBy('vs','DESC');
            break;
        }
        return $qb;
        
    }
    
    public function findReadLaterPosts(User $user,$limit =15,$offset=0,$postData=array())
    {
        $qb = $this ->createQueryBuilder('p')
                    ->leftJoin('p.readLater', 'rl')
                    ->where('rl.user = :user')
                    ->setParameter('user', $user);
        $qb = $this->addScore($qb);
        $qb = $this->filterCustom($qb,$postData);
        
        $qb ->orderBy('rl.date','DESC')
            ->setFirstResult( $offset)
            ->setMaxResults($limit);
        
        return $qb->getQuery()->getResult();

    }
    public function findViewedPosts(User $user,$limit =15,$offset=0,$postData = array())
    {
        $qb = $this ->createQueryBuilder('p')
                    ->leftJoin('p.views', 'vi')
                    ->addSelect('vi')
                    ->where('vi.user = :user')
                    ->setParameter('user', $user)
                    ->distinct();
        
        $qb = $this->addScore($qb);
        $qb = $this->filterCustom($qb,$postData);
        
        $qb ->orderBy('vi.datein','DESC')
            ->setFirstResult( $offset)
            ->setMaxResults($limit);
        
        return $qb->getQuery()->getResult();

    }
    public function countViewedPosts(User $user)
    {
        $qb = $this ->createQueryBuilder('p')
                    ->select('count(p.id)')
                    ->leftJoin('p.views', 'vi')
                    ->where('vi.user = :user')
                    ->setParameter('user', $user);
        
        
        
        return $qb->getQuery()->getSingleScalarResult();

    }
    
    
    
    private function filterCustom($qb,$postData = array())
    {
        $qb->leftJoin('p.categories','c');
        $where = $qb->expr()->andx();
       
        if (isset($postData['categories']) && count($postData['categories']) )
        {
            $where->add($qb->expr()->in('c.id',$postData['categories']));
        }
        
        
        $whereTime = $qb->expr()->andx();
        $timeClause = false;
        if (isset($postData['time']['from']))
        {
            $timeClause = true;
            $timeFrom = $this->getTimeFromIndice($postData['time']['from']);
            $whereTime->add($qb->expr()->gte('p.dateAdded', ':timeFrom'));
            $qb->setParameter('timeFrom',$timeFrom);
        }
        if (isset($postData['time']['to']))
        {
            $timeClause = true;
            $timeTo = $this->getTimeFromIndice($postData['time']['to']);
            $whereTime->add($qb->expr()->lte('p.dateAdded', ':timeTo'));
            $qb->setParameter('timeTo',$timeTo);
        }
        if ($timeClause)
        {
            $where->add($whereTime);
        }
        
        $qb->andWhere($where);
        
        return $qb;
    }
    
    
    private function wallWhereFilter($qb,$wall,$user,$postData = array())
    {
         //andx is used to build a WHERE clause like (expression 1 AND expression 2)
        //Alternatively you can use orx for (expression 1 OR expression 2)
        //Also you can next either inside of each other...so ->where(andx(orx("expression1","expression2),"expression3"))
        //would be WHERE ( ( expression 1 OR expression 2 ) AND expression 3 )
        
        /*
         * La REquete doit ressembler à un truc genre WHERE (IN categories Or IN tags) AND (NOT IN excluded categories AND NOT IN excluded tags AND NOT in bannedPostId) 
         */
        
        $em= $this->getEntityManager();
        $bannedRepo = $em->getRepository('P4MBackofficeBundle:BannedPost');
        $bannedPostId = $bannedRepo->findIdsByUser($user);
        
//        die(print_r($postData,true));
        if (isset($postData['categories']) && count($postData['categories']) )
        {
//             die('categories'.count($postData['categories']));
            $allowedCategoriesId = $postData['categories'];
        }
        else if (count($postData))
        {
            $allowedCategoriesId = array();
        }
        else
        {
            $allowedCategoriesId = array();
            foreach($wall->getIncludedCategories() as $category)
            {
                $allowedCategoriesId[] = $category->getId();
            }
        }
        
        $allowedTagsId = array();
        foreach($wall->getIncludedTags() as $tag)
        {
            $allowedTagsId[] = $tag->getId();
        }
        
        $excludedCategoriesId = array();
        foreach($wall->getExcludedCategories() as $category)
        {
            $excludedCategoriesId[] = $category->getId();
        }
        $excludedTagsId = array();
        foreach($wall->getExcludedTags() as $tag)
        {
            $excludedTagsId[] = $tag->getId();
        }
        
        $where = $qb->expr()->andx();
        
        
        $qb->leftJoin('p.categories','c');
        $qb->leftJoin('p.tags','t');
        
        
        //Première partie du WHERE (le or IN)
        if (count($allowedCategoriesId) && count($allowedTagsId))
        {
            $whereCat = $qb->expr()->orx();
            $whereCat->add($qb->expr()->in('c.id',$allowedCategoriesId));
            $whereCat->add($qb->expr()->in('t.id',$allowedTagsId));
            
            $where->add($whereCat);
        }
        else if (count($allowedTagsId))
        {
            $where->add($qb->expr()->in('t.id',$allowedTagsId));
            
        }
        else if (count($allowedCategoriesId))
        {
            $where->add($qb->expr()->in('c.id',$allowedCategoriesId));
            
        }
        
        
        //Deuxiemme partie du WHERE le AND (not in AND not in)
        if (count($excludedCategoriesId) && count($excludedTagsId))
        {
            $whereCat = $qb->expr()->andx();
            $whereCat->add($qb->expr()->notIn('c.id',$excludedCategoriesId));
            $whereCat->add($qb->expr()->notIn('t.id',$excludedTagsId));
            
            $where->add($whereCat);
        }
        else if (count($excludedTagsId))
        {
            $where->add($qb->expr()->notIn('t.id',$excludedTagsId));
        }
        else if(count($excludedCategoriesId))
        {
            $where->add($qb->expr()->notIn('c.id',$excludedCategoriesId));
        }
        
        if (count($bannedPostId))
        {
            $where->add($qb->expr()->notIn('p.id',$bannedPostId));
        }
        
        $whereTime = $qb->expr()->andx();
        $timeClause = false;
        if (isset($postData['time']['from']))
        {
            $timeClause = true;
            $timeFrom = $this->getTimeFromIndice($postData['time']['from']);
            $whereTime->add($qb->expr()->gte('p.dateAdded', ':timeFrom'));
            $qb->setParameter('timeFrom',$timeFrom);
        }
        if (isset($postData['time']['to']))
        {
            $timeClause = true;
            $timeTo = $this->getTimeFromIndice($postData['time']['to']);
            $whereTime->add($qb->expr()->lte('p.dateAdded', ':timeTo'));
            $qb->setParameter('timeTo',$timeTo);
        }
        if ($timeClause)
        {
            $where->add($whereTime);
        }
        
            
        $qb->where($where);
        
        return $qb;
    }
    
    
    
    private function getTimeFromIndice($indice)
    {
        $dateTime = new \DateTime;
        switch ($indice)
        {
            case '1' :
                $dateTime->modify('-1 day');
                break;
            case '2' :
                $dateTime->modify('-2 day');
                break;
            case '3' :
                $dateTime->modify('-3 day');
                break;
                break;
            case '4' :
                $dateTime->modify('-1 week');
                break;
                break;
            case '5' :
                $dateTime->modify('-2 week');
                break;
            case '6' :
                $dateTime->modify('-1 month');
                break;
                break;
            case '7' :
                $dateTime->modify('-3 month');
                break;
                break;
            case '8' :
                $dateTime->modify('-6 month');
                break;
                break;
            case '9' :
                $dateTime->modify('-1 year');
                break;
            case '10' :
                $dateTime->modify('-5 year');
                break;
            case '11' :
                $dateTime->modify('-11 year');
                break;
                
        }
        
        return $dateTime;
    }
    
    
    private function addViews($qb)
    {
        return $qb  ->leftJoin('p.views','vi')
                    ->addSelect('vi');
    }
    private function addVotes($qb)
    {
        return $qb  ->leftJoin('p.votes','v')
                    ->addSelect('v');
    }
    
    private function addComments($qb)
    {
        return $qb  ->leftJoin('p.comments','co')
                    ->addSelect('co');
    }
    private function addCategories($qb)
    {
        return $qb  ->leftJoin('p.categories','c')
                    ->addSelect('c');
    }
    
    private function addUser($qb)
    {
        return $qb  ->leftJoin('p.user','u')
                    ->addSelect('u');
    }
    private function addScore($qb)
    {
        return $qb  ->leftJoin('p.score','sc')
                    ->addSelect('sc')
                    ;
    }

    
}
